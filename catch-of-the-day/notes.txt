Lesson 7
---------

sprops = args passed in to the component

$0 = in chrome etc dev tools - always the thing that's selected
(you can type these in the console to select what's selected by the browser)
$1 = next element 
$n etc.

$r = all the props that area available to the object (component) = all the args that've been passed to it   

Lesson 8
---------

stateless functional components = if your component just has a render method and prop types, it doesn't need to really *do* stuff it's just using templating kinda. this is vs. full components that have their own built-in methods etc.


Lesson 9
-------------

Routes - a separate, not part of default package like in node routing
-in routing we defined the URL schema where storeId is now a param inside that react component, so suddenly something can get passed from the browser URL into the app as a variable (See App > props > match > params > storeId)


Lesson 10
-------------

named exports:
import { specific funciton } from './FilePath';
which we can now use in our current file 
(ths is an alternative to importing the whole file and every function into it)

So methodology:
put helper functions in helpers.js and do that.
(Is it a react only thing or a JS thing that we're doing this?)


Lesson 11
----------

React event listeners happen •inline•
onClick={this.handleClick}
and then in the component (outside the render function)
  handleClick() {
    alert("clicked!");
  }
  (note that when you call it you're not doing onClick={handleClick() - even though you're calling a function})
  
  Golden rule in react: Don't touch the DOM. It's what your app spits out, but the things happening in your app should live in the blob of the app itself. You're not supposed to be messing with the car while it's already in the customer's garage, do that on the assembly line.

  Instead! Use *refs* to grab the value outta dom elemnet user is interacting with. Refs reference dom nodes.

  To make this work! Need to unnastand *binding* in React:
  
  React has *lifecycle events*. Things like componentDidMount()
  You can do componentDidMount() {do some stuff} similar to how you do JQuery events after the document's loaded.

So in order to reference a component from within itself, you can't just use this like with normal Javascript.

To access this, we can use a consructor function. Don't fully unnastand super() but seems like 'run a cable from inside the box to outside the box and into the plugs on the outside of the box.' (Really it's just reconciling the order all these things are loaded in):

constructor() {
    super(); 
    this.goToStore = this.goToStore.bind(this);
}

Which makes 'this' into a reference to 'this,' the instance of storepicker we're in. 

HOWEVER if you have a buncha methods you're trynta use it gets messy real fast with binding a whole lotta things. 

INSTEAD

we make that method we want to use into a *property* of the component, and we pass it the event. This means the property is bound to the instance of this component. 

  goToStore = (event) => {
    event.preventDefault();
    //  prevent form from submitting and reloading the page
    console.log(this);
    //  get input text
    // change the page to store/storeID
  };

  and then 

        <form className="store-selector" onSubmit={this.goToStore}>
etc.

So we're creating methods inside our component then passing those methods as props to our own component so they can be called and work properly at the right moment in time and in the right context. This is making me think of the helper bots that come out of the big robot and deploy after big robot deploys.

Lesson 12
--------------
setting a reference - like an event listener:

  a variable to hold the value (inside our component):
    myInput = React.createRef();

  a thing to attach that value to:
            <input 
            type="text"
            ref={this.myInput} /> 

  and then we can use that value somewhere:
      console.log(this.myInput.current.value);

 then we set an input somewhere to attach to that reference.
Now that reference (in this case myInput)

Question for exploration:
- when I console log this at this point, I get the storepicker component back with a bunch of props that arent' found in the react tools components browser plugin. Is it the difference between the component's default state and the state when it's been rendered in the browser and come back with a buncha extra stuff?

Lesson 13
--------------

State! an object that lives inside a component and holds all the data the component and its children need

In react, we want a single source of truth that then the components pull from

In the exercise, it's all the fish that are available at the store. When I update something in the state, react REACTS and updates all the components using that state. (Instead of event listeners or passing data around functions or all the other stuff you'd do in vanilla JS) So single source of truth that gets used in a buncha places.

Making this form a component so it's reusable 

Q: Ways to decide what's a component and what's part of a larger component?

after we takee some input and geet it into a variablee, how does it get outta that component into state so accessible to other things.

To do this you need to put in a higher component. Data cannot get automatically passed up, only down.

So need to get foorm data and push into state (in App.js)

The methods that update state and the state need to live in the same component. So App.js needs a thing that's going to get the form data, you don't push the form data from the form itself.

So for this to work, we make the addFish method in App.js, and we have to pass this method down the hierarchy of components as a prop. (remember props are kinda like arguments passed into functions)

So now in App.js, we can pass addFish to Inventory, and its' a prop of Inventory. 
        <Inventory addFish={this.addFish} />

And from addFishForm, we can pass that into the next component, addFishForm BUT we're passing a prop, not one of our own methods, so different syntax:
        <AddFishForm addFish={this.props.addFish} />
