Lesson 7
---------

sprops = args passed in to the component

$0 = in chrome etc dev tools - always the thing that's selected
(you can type these in the console to select what's selected by the browser)
$1 = next element 
$n etc.

$r = all the props that area available to the object (component) = all the args that've been passed to it   

Lesson 8
---------

stateless functional components = if your component just has a render method and prop types, it doesn't need to really *do* stuff it's just using templating kinda. this is vs. full components that have their own built-in methods etc.


Lesson 9
-------------

Routes - a separate, not part of default package like in node routing
-in routing we defined the URL schema where storeId is now a param inside that react component, so suddenly something can get passed from the browser URL into the app as a variable (See App > props > match > params > storeId)


Lesson 10
-------------

named exports:
import { specific funciton } from './FilePath';
which we can now use in our current file 
(ths is an alternative to importing the whole file and every function into it)

So methodology:
put helper functions in helpers.js and do that.
(Is it a react only thing or a JS thing that we're doing this?)


Lesson 11
----------

React event listeners happen •inline•
onClick={this.handleClick}
and then in the component (outside the render function)
  handleClick() {
    alert("clicked!");
  }
  (note that when you call it you're not doing onClick={handleClick() - even though you're calling a function})
  
  Golden rule in react: Don't touch the DOM. It's what your app spits out, but the things happening in your app should live in the blob of the app itself. You're not supposed to be messing with the car while it's already in the customer's garage, do that on the assembly line.

  Instead! Use *refs* to grab the value outta dom elemnet user is interacting with. Refs reference dom nodes.

  To make this work! Need to unnastand *binding* in React:


So in order to reference a component from within itself, you can't just use this like with normal Javascript.

To access this, we can use a consructor function. Don't fully unnastand super() but seems like 'run a cable from inside the box to outside the box and into the plugs on the outside of the box.' (Really it's just reconciling the order all these things are loaded in):

constructor() {
    super(); 
    this.goToStore = this.goToStore.bind(this);
}

Which makes 'this' into a reference to 'this,' the instance of storepicker we're in. 

HOWEVER if you have a buncha methods you're trynta use it gets messy real fast with binding a whole lotta things. 

INSTEAD

we make that method we want to use into a *property* of the component, and we pass it the event. This means the property is bound to the instance of this component. 

  goToStore = (event) => {
    event.preventDefault();
    //  prevent form from submitting and reloading the page
    console.log(this);
    //  get input text
    // change the page to store/storeID
  };

  and then 

        <form className="store-selector" onSubmit={this.goToStore}>
etc.

So we're creating methods inside our component then passing those methods as props to our own component so they can be called and work properly at the right moment in time and in the right context. This is making me think of the helper bots that come out of the big robot and deploy after big robot deploys.

Lesson 12
--------------
setting a reference - like an event listener:

  a variable to hold the value (inside our component):
    myInput = React.createRef();

  a thing to attach that value to:
            <input 
            type="text"
            ref={this.myInput} /> 

  and then we can use that value somewhere:
      console.log(this.myInput.current.value);

 then we set an input somewhere to attach to that reference.
Now that reference (in this case myInput)

Question for exploration:
- when I console log this at this point, I get the storepicker component back with a bunch of props that arent' found in the react tools components browser plugin. Is it the difference between the component's default state and the state when it's been rendered in the browser and come back with a buncha extra stuff?

Lesson 13
--------------

State! an object that lives inside a component and holds all the data the component and its children need

In react, we want a single source of truth that then the components pull from

In the exercise, it's all the fish that are available at the store. When I update something in the state, react REACTS and updates all the components using that state. (Instead of event listeners or passing data around functions or all the other stuff you'd do in vanilla JS) So single source of truth that gets used in a buncha places.

Making this form a component so it's reusable 

XTODO Ways to decide what's a component and what's part of a larger component?
- similar to functions, what's reusable elsewhere, how many damn files do you want, what does one task that's kinda self-contained 

after we takee some input and geet it into a variablee, how does it get outta that component into state so accessible to other things.

To do this you need to put in a higher component. Data cannot get automatically passed up, only down.

So need to get foorm data and push into state (in App.js)

The methods that update state and the state need to live in the same component. So App.js needs a thing that's going to get the form data, you don't push the form data from the form itself.

we start creating the shape of the data in the state, fishes and order are both objects:

  state = {
    fishes: {},
    order: {},
  };
  addFish = (fish) => {
    console.log("adding a fish");
  };


So for this to work, we make the addFish method in App.js, and we have to pass this method down the hierarchy of components as a prop. (remember props are kinda like arguments passed into functions)

So now in App.js, we can pass addFish to Inventory, and its' a prop of Inventory. 
        <Inventory addFish={this.addFish} />

And from addFishForm, we can pass that into the next component, addFishForm BUT we're passing a prop, not one of our own methods, so different syntax:
        <AddFishForm addFish={this.props.addFish} />

to update state:
you want to take a *copy* of state, modify *that*. You don't modify the object/state directly, that's called a _mutation_.

Copy the state:
    const fishes = {...this.state.fishes};

Now the new fishes. We're using Date.now() because it gives each fish a unique timestamp based on when it was added. (since it's a form we're not worried about two being added simultaneously rn) 

Setting state to include our new data:

we don't update state directly, that's called a mutation and is bad because reasons.

Instead, we make a copy of state, do stuff to it, then set state to it after that's all done:

  addFish = (fish) => {
    // take a copy of existing state
    const fishes = { ...this.state.fishes };
    // ... = object spread aka copy of state. see also: deep clone
    fishes[`fish${Date.now()}`] = fish;
    // add our new fish to fishes variable
    this.setState({
      fishes: fishes, // overwrite the state fishes with our new copy of fishes
    }

Object spread and deep clone:

Object spread:
from: https://dmitripavlutin.com/object-rest-spread-properties-javascript/
const cat = {legs: 4, sound: 'meow'};
const dog = {...cat, sound: 'woof'};
console.log(dog); // => { legs: 4, sounds: 'woof' }
(so ...[object] = easy way to say 'copy all the stuff from that object to here)

Deep Clone vs Shallow clone:

https://medium.com/javascript-in-plain-english/how-to-deep-copy-objects-and-arrays-in-javascript-7c911359b089

TODO: Object spread:


Accessing state vs. props:
-------------------------
When we're in app.js, state lives here, so we access parts of it by copying state via object spread:
    const fishes = {...this.state.fishes}

When we're in a component, that data has to have been passed down via props, so we access it like this:
    <button onClick={this.props.loadSampleFishes}>

or if it's an array we need to loop over and pass each item to a copy of a component with some of its data as props:
  {Object.keys(this.props.fishes).map((key) => (
          <EditFishForm fish={this.props.fishes[key]} key={key} />
        ))}




Lesson 14
===========

Lesson 15
===========

Mapping some content into 

JSX doen't have logic, use vanilla JS

  Get the keys from the fishes part of state

  Object.keys: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys

    {Object.keys(this.state.fishes)

    Key is a built in react thing - Each item needs a unique key so React can properly update it. 
    see also: https://reactjs.org/docs/lists-and-keys.html
    
  Since we're getting the keys with Object.keys we can just repurpose those as react keys (you could also just use array indecies if they were numbers)

    {Object.keys(this.state.fishes).map((key) => (
      <Fish key={key} />
    ))}

  And then we can *further* use those array keys to get the different parts out of the fishes part of the state object, like this:
  
  details={this.state.fishes[key]}

  So all together:

    {Object.keys(this.state.fishes).map((key) => (
      <Fish key={key} details={this.state.fishes[key]} />
    ))} 

See also
----------
ES6 Destructuring!
https://codeburst.io/es6-destructuring-the-complete-guide-7f842d08b98f
  

Lesson 16
----------
X_TODO Clarification on when a react component is a class vs. when it's just a constant - there're still props in header.js but it's declared as just a const. What is the trick a component will do that makes it a JS class and not a const?
This is a question of Class component vs. Functional Components:
https://itnext.io/react-component-class-vs-stateless-component-e3797c7d23ab

(Stateless)Functional component is just a JS function that takes some args (props) and returns some things.

Stateless = you can't reach this.state. Has no lifecycle events so can't use those as triggers for things. (more on that later)

Class components are more like constructor functions - React makes copies of them, and most importantly here they have state. They take the same time to render but they *do* compile to a lot more JS so still a performance consideration. 

Deciding between them is basically do you need state, lifecycle events or hooks? or do you need to just take in some stuff and spit some stuff out?

MARK: Order of things in an application file:
-----------------------------------------
State
Lifecycle events
Custom stuff
Render
-----------------------------------------

TODO: understand super 

----------------

Lifecycle events:

https://reactjs.org/docs/state-and-lifecycle.html
https://programmingwithmosh.com/javascript/react-lifecycle-methods/

Mounting, update, unmounting - all component lifeycle events
Render is a lifecycle method.(PS render is required to ONLY render things - be a pure function that doesn't also do things that are NOT rendering like updating state)

componentDidUpdate(), componentWillUnmount() etc. are all lifecycle. Based on the whole idea that you're putting a buncha stuff in the dom and you need to also be destroying it when no longer needed so you're not crashing people's web browser with a dom element for every sprite that appeared in your video game and then disappeared, or every image they've ever scrolled past in your insta clone until they close the browser.

----------------

in JS console in browser: you can manually fire off a function by:

$r.addToOrder('fish1');

($r. is like the jQuery $)

Telling which button is clicked:
if you need access to the key, you have to pass it a second time as a prop

So when we iterate through this.state.fishes and make a button for each:

{Object.keys(this.state.fishes).map((key) => (
        <Fish
          key={key}
          index={key}

... we give it a key (for React to use) and we also give it that index prop so it can tell the function we assign to onClick what the thing is that was clicked. (PS this Object.Keys)

addToOrder function:
  addToOrder = (key) => {w
    // take a copy of state
    const order = { ...this.state.order };
    // add to the order or update the number
    order[key] = order[key] + 1 || 1;
    // call setState to update our state to order(in state) == order(my local variable).
    this.setState({ order })

TODO: difference between +1 and ++ because ++ doesn't work here
    
Lesson 17 (oops skipped 17)
---------------------------
Use order state to display on page

object spread: put everything from state into it. BUT you don't want ot just put your entire state in there, only send what data you need.

Render function:
antidote for having too much going on in a single component but not enough for separate components.

You can totally make separate render functions inside a single component.

Tricks: 

iterating over something: array.map()


Lesson 18
-------------
More about FirebaseApp and how it's kinda like expressjs:
https://dev.to/farazamiruddin/react-firebase-add-firebase-to-a-react-app-4nc9

Mirroring state to firebase. THis needs to happen on the react version of document.ready in jquery. Needs to happen only once the component is loaded on the page. s

React has *lifecycle events*. Things like componentDidMount()
You can do componentDidMount() {do some stuff} similar to how you do JQuery events after the document's loaded, the app is loaded etc..

So once it's loaded:

  componentDidMount() {
    
    const { params } = this.props.match; (keeps us from having to read all the props into variables, solid trick)
    (refs are different in firebase than in react)

    Anyway, we don't wanna sync the whole database because it may have stuff from other stores. So we give it this path in syncState then some config params, and the state of the fishes component as its state to sync.
    PS: The arg going into base.syncState is using that `$derp`/derp concatenation method vs. +
    
    this.ref = base.syncState(`${params.storeId}/fishes`, {
      context: this,
      state: "fishes",
    });
  }

Unmounting things!

After we're listening for updates ot this one store with react, we never stop listening. And thats a memory leak. When we leave the store/close the app/visit a different store, we want to stop listenint to that channel so we're not consuming unnecessary resources. 


Lesson 19
----------------

Remember that passing javascript objects isn't safe, and localStorage wants stings. We use JSONs.stringify to turn an object into a string before setItem().

    localStorage.setItem(
      this.props.match.params.storeId,
      JSON.stringify(this.state.order)
    );

and then when we read it back from localStorage we use JSON.parse to get it back to an object:
  if (localStorageRef) {
      this.setState({ order: JSON.parse(localStorageRef) });
    }

Order of operations:
Stuff comes outtta localStorage instantly, so we've got this FOUS kinda thing where the order briefly shows up as a list of all your fish.. and they're all unavailable. 

'fish' doesn't exist until it comes from firebase (unless you're loading sample fishes) so to fix, we tell the order component to check if fish exists...
    const isAvailable = fish && fish.status === "available";
... and if fish deosn't exist, just spit out nothing in the order component, until state updates and fish exists and now there's an inventory to compare the order to.
    if (!fish) return null;


Lesson 20 
-------------------------------
This pattern keeps appearing and is important:
        {Object.keys(this.props.fishes).map(fish => <EditFishForm />)}

        Object.keys(this.props.fishes)
        - The keys of the fishes array that our current component been passed as a prop

        .map(fish => <EditFishForm />)
        - Take each of the things in the array I run .map on, and call it fish, and pass it to EditFishForm as a prop.

  computed property names, new in ES6
  ------------------------------------
  instead of doing: 
  
  handleNameChange = (event) => {
    change the name and send to state
  }
  handlePriceChange = (event) => {
    change the name and send to state
  }
  handleDescChange = (event) => {
    change the name and send to state
  }

  we can use computed property names:
    
    [event.currentTarget.name]: event.currentTarget.value,

... and now handle all those in one fukken line.

Lesson 21
---------------------------
Deleting items

TODO: Why is my button on firing whenever the page loads (if I put an onClick handler and console log something it fires off for each instance of the button, not on click.s)

TODO: And what is the {isAvailable} syntax on the button? It looks like it'd output a boolean, but how is that then fitting into the output of the return statement that it's into? Does it ... exit the function if that's false?

